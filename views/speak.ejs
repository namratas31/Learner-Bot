<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <!-- <link rel="stylesheet" href="speak.css"> -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300..900;1,300..900&display=swap" rel="stylesheet">

  
  <title>Pronunciation Checker</title>
  <style>





* {
    padding: 0px;
    margin: 0px;
    box-sizing: border-box;
    color: #25362e;
    font-family: "Rubik", "helvetica", "sans-serif";
    font-optical-sizing: auto;
    font-style: normal;
}

/* header */

.navbar {
    height: 100px;
    background-color: #042f1a;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 18px;
    border-bottom: 1.2px solid #25362e;
}

.navbar a {
    text-decoration: none;
    font-family: "Arial", "Helvetica", "sans-serif";
    color: #fff6f6;
    font-weight: 400;
    margin-top: 20px;
}

#logo {
    width: 320px;
    text-align: center;
    margin-top: 14px;
    background-image: url("im.gif");
    background-size: contain;
    background-repeat: no-repeat;
    height: 120px;
    display: flex;
    align-items: center;
    color: #fff6f6;
    font-family: "rubik";
    justify-content: space-evenly;
    font-size: 15px;
    font-weight: 500;
}

#contact {
    height: 38px;
    width: 110px;
    background-color: #d4ed6d;
    border-radius: 4px;
    border: none;
    margin-top: 10px;
    color: #02110a;
    font-weight: 700;
    position: relative;
    cursor: pointer;
    margin-right: 100px;
}


/* container */


.container
{
    height: 600px;
    width: 700px;
    text-align: center;
    margin: auto;
}

.container h1{
    margin-top: 100px;
    margin-bottom: 50px;
    font-weight: 800;
    border-bottom: 0.5px solid #02110a;
}

.container p{
    margin-bottom: 40px;
    font-size: 14px;
}

#wordDisplay
{
    margin-bottom: 30px;
    font-size: larger;
    font-weight: 800;
    color: rgb(183, 27, 27);
}

.container button{
    height: 40px;
    width: 70px;
    margin-left: 10px;
}




  </style>
  
</head>
<body>
   
  <header>
    <div class="navbar">
        <div id="logo">
          AI based <br>Learner Bot
        </div>
        <button id="contact" onclick="javascript:history.back()">BACK</button>
    </div>
  </header>


  <div class="container">
    <h1>Pronunciation Checker</h1>
    <p>Click the button below and pronounce the given word.</p>
    <div id="wordDisplay"></div>
    <button id="recordButton">Record</button>
    <button id="nextButton" disabled>Next</button>
    <p id="timer"></p>
    <p id="result"></p>
  </div>

  <!-- <script src="speak.js"></script> -->


  <script>


const words = ["hello", "actor", "rainbow", "elephant"]; // List of words to pronounce
    let currentWordIndex = 0;
    let correctlyPronouncedCount = 0;
    let voiceHeard = false; // To track if voice is heard for current word
    const wordDisplay = document.getElementById('wordDisplay');
    const recordButton = document.getElementById('recordButton');
    const nextButton = document.getElementById('nextButton');
    const timerDisplay = document.getElementById('timer');
    const resultDisplay = document.getElementById('result');
    const recognition = new webkitSpeechRecognition() || new SpeechRecognition();

    // Function to display the current word
    function displayWord() {
      wordDisplay.textContent = words[currentWordIndex];
      voiceHeard = false; // Reset voiceHeard for the new word
      nextButton.disabled = true; // Disable Next button for new word
      recordButton.disabled = false; // Enable Record button for new word
      recordButton.style.opacity = '1'; // Reset opacity for the Record button
    }

    // Function to handle the recording
    recordButton.addEventListener('click', () => {
      recordButton.disabled = true;
      resultDisplay.textContent = '';
      timerDisplay.textContent = 'Recording...';

      recognition.start();
      let timer = 5; // Change the recording duration to 6 seconds
      const countdown = setInterval(() => {
        timerDisplay.textContent = `Recording... ${timer}s left`;
        timer -= 1;
        if (timer < 0) {
          clearInterval(countdown);
          recognition.stop();
          timerDisplay.textContent = '';

          if (!resultDisplay.textContent) {
            resultDisplay.textContent = 'No voice heard';
            nextButton.disabled = true; // Disable Next button if no voice heard
          } else {
            voiceHeard = true; // Voice is heard for the current word
            recordButton.disabled = true; // Disable Record button after voice is heard
            recordButton.style.opacity = '0.5'; // Reduce opacity to visually indicate disabled
          }

          if (currentWordIndex < words.length - 1 && voiceHeard) {
            nextButton.disabled = false; // Enable Next button after recording ends and voice heard
          } else if (currentWordIndex === words.length - 1) {
            nextButton.style.display = 'none'; // Hide Next button at the last word
            displayResult(); // Display the result after all words are completed
          }
        }
      }, 1000);

      recognition.onresult = (event) => {
        const recordedWord = event.results[0][0].transcript.toLowerCase().trim();
        checkPronunciation(recordedWord);
      };

      recognition.onend = () => {
        recordButton.disabled = false;
        clearInterval(countdown);
        timerDisplay.textContent = '';
      };
    });

    // Function to check the pronunciation
    function checkPronunciation(recordedWord) {
      const expectedWord = words[currentWordIndex];

      if (recordedWord === expectedWord) {
        resultDisplay.textContent = 'Correct pronunciation!';
        correctlyPronouncedCount++;
        recordButton.disabled = true; // Disable Record button if pronunciation is correct
        recordButton.style.opacity = '0.5'; // Reduce opacity to visually indicate disabled
      } else {
        resultDisplay.textContent = 'Incorrect pronunciation. Try again!';
        recordButton.disabled = true; // Disable Record button if pronunciation is incorrect
        recordButton.style.opacity = '0.5'; // Reduce opacity to visually indicate disabled
      }

      voiceHeard = true; // Voice is heard for the current word

      if (currentWordIndex < words.length - 1) {
        if (voiceHeard) {
          nextButton.disabled = false; // Enable Next button after result and voice heard
        }
      } else if (currentWordIndex === words.length - 1) {
        displayResult(); // Display the result after all words are completed
      }
    }

    // Function to display the final result
    function displayResult() {
      const container = document.querySelector('.container');
      const resultDisplay = document.getElementById('result');
      resultDisplay.textContent = `Correctly pronounced ${correctlyPronouncedCount} out of ${words.length} words.`;

      // Remove all elements inside the container except the result display
      while (container.firstChild !== resultDisplay) {
        container.removeChild(container.firstChild);
      }
    }

    // Function to move to the next word
    nextButton.addEventListener('click', () => {
      currentWordIndex = (currentWordIndex + 1) % words.length;
      displayWord();
      resultDisplay.textContent = ''; // Clear the result for the new word
    });

    // Initialize with the first word
    displayWord();


  </script>

</body>
</html>
